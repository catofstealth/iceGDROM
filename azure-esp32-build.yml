# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- esp32

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    echo Creating base folder
    sudo mkdir /opt/
    sudo mkdir /opt/riscv
    sudo ls -al /opt/riscv
    echo Adding Path
    export PATH=$PATH:/opt/riscv/bin
    echo $PATH
    echo Downloading prebuild binaries
    sudo wget -c https://github.com/stnolting/riscv-gcc-prebuilt/releases/download/rv32i-4.0.0/riscv32-unknown-elf.gcc-12.1.0.tar.gz -O - | sudo tar -xz -C /opt/riscv
    echo Testing binaries
    riscv32-unknown-elf-gcc -v
    echo Installing packages
    sudo apt-get update
    sudo apt-get install yosys arachne-pnr fpga-icestorm nextpnr-ice40
    make
  displayName: 'Setup prerequisites and run make'

- script: |
    echo Adding Path
    export PATH=$PATH:/opt/riscv/bin
    make
  displayName: 'Build all (make in root)'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      fpga/obj/gdrom_hw_emulator.bin
      test/obj/*.GI0
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'Artifacts'
    publishLocation: 'Container'
